#!/bin/zsh
. .kwproject/config

branch=$(git rev-parse --abbrev-ref HEAD)
if [[ $? != 0 ]]; then
    echo 'FATAL: Cannot fetch git version.'
    exit 2
fi

echo $branch | grep '^release/' > /dev/null
if [[ $? != 0 ]]; then
    echo 'FATAL: Not on a git-flow release branch.'
    exit 2
fi

version=$(echo $branch | sed 's|^release/||')

echo $version | grep '^[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}$' > /dev/null

if [[ $? != 0 ]]; then
    echo $version | grep '^[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}\-[0-9A-Za-z-]\{1,\}$' > /dev/null
    if [[ $? != 0 ]]; then
        echo 'WARNING: version number is not compliant with versioning scheme (Semantic Versioning 2.0)'
        read  -p 'Continue? [y/N] ' vercont
        if [[ $vercont == 'y' || $vercont == 'Y' ]]; then
            echo 'Continuing.'
        else
            exit 2
        fi
    else
        echo 'NOTICE: pre-release version number in use.'
        read  -p 'Continue? [Y/n] ' vercont
        if [[ $vercont == 'n' || $vercont == 'N' ]]; then
            exit 2
        else
            echo 'Continuing.'
        fi

rm -rf $PROJECTLC.egg-info __pycache__ $PROJECTLC/__pycache__ dist build

date=$(date '+%Y-%m-%d')
datel=$(date '+%Y-%m-%d %H:%M%z')
datep=$(date '+%Y%m%d')

sed "s/version=.*/version='$version',/g" setup.py -i
sed "s/release = .*/release = '$version'/g" docs/conf.py -i
sed "s/:Version: .*/:Version: $version/g" docs/*.rst -i
sed "s/# $PROJECTLCC v.*/# $PROJECTLCC v$version/" $PROJECTLC/*.py -i
sed "s/__version__ = .*/__version__ = '$version'/g" $PROJECTLC/__init__.py -i
sed "s/pkgver=.*/pkgver=$version/g" PKGBUILD -i
sed "s/pkgver=.*/pkgver=$datep/g" PKGBUILD-git -i
sed "s/:Date: .*/:Date: $date/g" docs/*.rst -i

###: python2-$PROJECTLC{,-git} packages
#sed "s/pkgver=.*/pkgver=$version/g" PKGBUILD-2 -i
#sed "s/pkgver=.*/pkgver=$datep/g" PKGBUILD-2-git -i

cp docs/README.rst docs/CHANGELOG.rst docs/CONTRIBUTING.rst .
cp docs/README.rst README

###: Locale Generation
./.kwproject/localegen

###: Testing and building
python -c "import $PROJECTLC"
if [[ $? = 1 ]]; then
    echo "Import failed.  Fix your code or don't come back."
    exit 1
fi

./tests.py
if [[ $? = 1 ]]; then
    echo "Tests failed.  Fix your code or don't come back."
    exit 1
fi

echo 'This is the last chance to quit.  Hit ^C now if you want to.'
read bailout

./setup.py sdist upload

###: AUR Package Creation
md5out=$(md5sum 'dist/'$PROJECTLC'-'$version'.tar.gz'|awk '{print $1}')
sed "s/md5sums=.*/md5sums=('$md5out')/" PKGBUILD -i
###: python2-$PROJECTLC package
#sed "s/md5sums=.*/md5sums=('$md5out')/" PKGBUILD-2 -i

rm -rf MKPKGBUILD
mkdir MKPKGBUILD
cd MKPKGBUILD

###: $PROJECTLC{,-git} packages
#mkdir $PROJECTLC{,-git}
#cp ../PKGBUILD ./$PROJECTLC
#cp ../PKGBUILD-git ./$PROJECTLC"-git/PKGBUILD"
#tar -czvf $PROJECTLC"-0.1.0-1".src.tar.gz $PROJECTLC
#tar -czvf $PROJECTLC"-git-19700101-1".src.tar.gz $PROJECTLC"-git"

###: python{2,}-$PROJECTLC{,-git} packages
#mkdir python{,2}'-'$PROJECTLC{,-git}
#cp ../PKGBUILD ./python-$PROJECTLC
#cp ../PKGBUILD-git ./python-$PROJECTLC"-git/PKGBUILD"
#cp ../PKGBUILD-2 ./python2-$PROJECTLC/PKGBUILD
#cp ../PKGBUILD-2-git ./python2-$PROJECTLC"-git/PKGBUILD"
#tar -czvf python-$PROJECTLC"-0.1.0-1".src.tar.gz python-$PROJECTLC
#tar -czvf python2-$PROJECTLC"-0.1.0-1".src.tar.gz python-$PROJECTLC
#tar -czmf python-$PROJECTLC"-git-19700101-1".src.tar.gz python-$PROJECTLC"-git"
#tar -czvf python2-$PROJECTLC"-git-19700101-1".src.tar.gz python-$PROJECTLC"-git"

aurploader -a *.src.tar.gz
cd ..
rm -rf MKPKGBUILD

###: git commit
if [[ $1 != '-c' ]]; then
    echo 'Commit message (sans the version?)'
    echo -n '> '
    read commitmsg
    if [[ commitmsg = '' ]]; then
        cm='y'
    fi
else
    cm='y'
fi

rm -rf $PROJECTLC.egg-info __pycache__ $PROJECTLC/__pycache__ dist build

git add *
if [[ $? != 0 ]]; then
    echo 'Open another terminal and fix the errors.'
    read dn
    git add *
    if [[ $? != 0 ]]; then
        echo 'But please test your changes using that other terminal.'
        read dn2
        git add *
    fi
fi

if [[ $cm = 'y' ]]; then
    git commit -as
else
    git commit -asm "v$version: $commitmsg"
fi

git flow release finish $branch
git push
git push --tags
